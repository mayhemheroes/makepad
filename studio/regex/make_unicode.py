#!/usr/bin/python3

import itertools
import operator
import re
import sys
import urllib.request

UNICODE_BASE_URL = "https://www.unicode.org/Public/14.0.0/ucd"

def Ranges(codes):
    range = None
    for code in codes:
        if range is None:
            range = [code, code]
        else:
            if code == range[1] + 1:
                range[1] = code
            else:
                yield range
                range = [code, code]
    if range is not None:
        yield range

def PrintTable(name, codes):
    ranges = list(Ranges(codes))
    print("pub static %s: [Range<char>; %d] = [" % (name, len(ranges)))
    for range in ranges:
        print("    Range::new('\\u{%X}', '\\u{%X}')," % (range[0], range[1]))
    print("];")

def ParseCodeValue(string):
    try:
        value = int(string, 16)
    except ValueError:
        raise Exception("invalid unicode value")
    if value < 0 or value > 0x10FFFF:
        raise Exception("invalid unicode value")
    return value

def ParseCodeRange(string):
    bounds = string.split("..")
    if len(bounds) == 1:
        start = ParseCodeValue(bounds[0])
        end = start
    elif len(bounds) == 2:
        start = ParseCodeValue(bounds[0])
        end = ParseCodeValue(bounds[1])
    else:
        raise Exception("invalid unicode range")
    if start > end:
        raise Exception("invalid unicode range")
    return range(start, end + 1)

def ParseCharName(string):
    match = re.match("<(.*), (First|Last)>", string)
    if match is None:
        return (string[0], None)
    return match.groups()

def ReadUnicodeData(url):
    if url.startswith("https://"):
        stream = urllib.request.urlopen(url)
    else:
        stream = open(url, "rb")

    first = None
    expect_last = None
    for line in stream:
        line = line.decode("utf-8")

        hash = line.find("#")
        if hash >= 0:
           line = line[:hash]
        line = line.strip()
        if not line:
            continue

        fields = [field.strip() for field in line.split(";")]
        codes = ParseCodeRange(fields[0])
        (name, cont) = ParseCharName(fields[1])
        if expect_last is not None:
            if name != expect_last or cont != "Last":
                raise Exception("expected last line for %s", expect_last)
            if len(codes) != 1 or codes[0] < first:
                raise Exception("invalid last line")
            codes = range(first, codes[0] + 1)
            first = None
            expect_last = None
            yield [codes] + fields[1:]
        elif cont == "First":
            if len(codes) != 1:
                raise Exception("invalid first line")
            first = codes[0]
            expect_last = name
        else:
            yield [codes] + fields[1:]

def ReadGeneralCategories(unicode_base_url):
    categories = {}
    for [codes, _, category, *_] in ReadUnicodeData(unicode_base_url + "/UnicodeData.txt"):
        categories.setdefault(category, []).extend(codes)
        if len(category) > 1:
            short = category[0]
            categories.setdefault(short, []).extend(codes)
    return categories

def ReadDerivedCoreProperties(unicode_base_url):
    properties = {}
    for [codes, property] in ReadUnicodeData(unicode_base_url + "/DerivedCoreProperties.txt"):
        properties.setdefault(property, []).extend(codes)
    return properties

def ReadContributoryProperties(unicode_base_url):
    other_properties = {}
    for [codes, other_property] in ReadUnicodeData(unicode_base_url + "/PropList.txt"):
        other_properties.setdefault(other_property, []).extend(codes)
    return other_properties

def SortUnique(seq):
    return map(operator.itemgetter(0), itertools.groupby(sorted(seq)))

def main():
    if len(sys.argv) > 1:
        unicode_base_url = sys.argv[1]
    else:
        unicode_base_url = UNICODE_BASE_URL

    categories = ReadGeneralCategories(unicode_base_url)
    properties = ReadDerivedCoreProperties(unicode_base_url)
    other_properties = ReadContributoryProperties(unicode_base_url)

    print("//! Generated by make_unicode.py")
    print("")
    print("use crate::range::Range;")
    print("")

    digit = []
    for category in ["Nd"]:
        digit.extend(categories[category])
    digit.sort()
    PrintTable("DIGIT", SortUnique(digit))
    print()

    space = []
    for other_property in ["White_Space"]:
        space.extend(other_properties[other_property])
    space.sort()
    PrintTable("SPACE", SortUnique(space))
    print()

    word = []
    for category in ["M", "Nd", "Pc"]:
        word.extend(categories[category])
    for property in ["Alphabetic"]:
        word.extend(properties[property])
    for other_property in ["Join_Control"]:
        word.extend(other_properties[other_property])
    PrintTable("WORD", SortUnique(word))

if __name__ == '__main__':
    main()
